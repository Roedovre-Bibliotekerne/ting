<?php // $Id$

/**
 * @file ting.module
 * Module to integrate the Ting search engine in our Drupal site.
 */

/**
 * Implementation of hook_menu().
 */
function ting_menu() {
  $path = drupal_get_path('module', 'ting') . '/includes';
  $items = array();

  $items['ting/object/redirect'] = array(
    'title' => 'Redirect to object based on local ID (links from bibliotek.dk).',
    'page callback' => 'ting_search_pages_object_redirect',
    'access arguments' => array('search content'),
    'type' => MENU_CALLBACK,
    'file' => 'ting_search.pages.inc',
  );
  
  $items['admin/settings/ting'] = array(
    'title' => 'Ting search',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'ting.admin.inc',
    'file path' => $path,
  );

  $items['admin/settings/ting/access'] = array(
    'title' => 'Ting access',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implementation of hook_theme().
 */
function ting_theme() {
  return array(
    'ting_collection' => array(
      'arguments' => array('collection' => NULL, 'query_args' => NULL),
      'template' => 'ting_collection',
      'file' => 'ting_search.theme.inc',
    ),
    'ting_object' => array(
      'arguments' => array('object' => NULL),
      'template' => 'ting_object',
    ),
    'ting_object_title' => array(
      'arguments' => array('object' => NULL, 'display_image' => NULL),
      'template' => 'ting-object-title',
    ),
    // Render periodicals as objects. Library system modules should
    // Override this to use another template
    'ting_periodical' => array(
      'arguments' => array('object' => NULL),
      'template' => 'ting_object',
    ),
  );
}

/**
 * Implementation of hook_ctools_plugin_api().
 */
function ting_ctools_plugin_api($module, $api) {
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}

/**
 * Implementation of hook_ctools_plugin_directory().
 *
 * Tells CTools (and thus Panels) where to look for plugin code.
 */
function ting_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' || $module == 'panels') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implementation of hook_imagecache_default_presets()
 */
function ting_imagecache_default_presets() {
  $presets = array();
  
  $presets['180_x'] = array (
    'presetname' => '180_x',
    'actions' => 
    array (
      0 => 
      array (
        'weight' => '0',
        'module' => 'imagecache',
        'action' => 'imagecache_scale',
        'data' => 
        array (
          'width' => '180',
          'height' => '',
          'upscale' => 0,
        ),
      ),
    ),
  );
  
  $presets['80_x'] = array (
    'presetname' => '80_x',
    'actions' => 
    array (
      0 => 
      array (
        'weight' => '0',
        'module' => 'imagecache',
        'action' => 'imagecache_scale',
        'data' => 
        array (
          'width' => '80',
          'height' => '',
          'upscale' => 1,
        ),
      ),
    )
  );
  
  return $presets;
}

/**
 * Implementation of hook_ting_add_js().
 */
function ting_ting_add_js($type) {
	// Add button helper on collection and object views if the required jQuery UI modules are loaded
	// These are not requirements to avoid unecessary dependencies in ting module
	if (in_array($type, array('ting_collection_view', 'ting_object_view'))) {
		if (module_exists('jquery_ui') && module_exists('jquery_ui_theme')) {
	    jquery_ui_add('ui.dialog');
	    jquery_ui_theme_load();
	    drupal_add_js(drupal_get_path('module', 'ting') . '/js/ting.buttons.js');
		}
	}
}

/**
 * Template preprocessor for collections of ting objects.
 */
function template_preprocess_ting_collection(&$variables) {
  // Preprocess the collection object here!

  $collection = $variables["collection"];

  // Allow modules to add action buttons to collection objects
  $variables['buttons'] = array();
  foreach ($collection->objects as $object) {
    $variables['buttons'][$object->id] = module_invoke_all('ting_object_buttons', $object);
  }
  
  $sorted = array();
  
  // If we know what query lead to the collection then we can use this for sorting
  if ($query_args = $variables['query_args']) {
    if ($entry = $query_args['entry']) {
      // Build the query for the collection in the search result
      $query = '';
  
      //Wrap base query
      $query .= (isset($query_args['query'])) ? '('.$query_args['query'].')' : '';
    
      //Extend query with selected facets
      if (isset($query_args['facets'])) {
        foreach ($query_args['facets'] as $name => $value) {
          $facetArray[] = $name.'="'.$value.'"';
        }   
        $query .= ' AND '.implode(' AND ', $facetArray);
      }
      
      // Get the corresponding entry in the search result 
      $result = ting_do_search($query, $entry, 1, array('facets' => array()));
      
      //Determine the order of object types based on the order of objects
      //in the search result
      if ($search_collection = array_shift($result->collections)) {
        foreach ($search_collection->objects as $object) {
          $sorted[$object->type] = array();
        }
      }
      
      //Put all objects from original collection into the ordered object type buckets.
      //Types not referenced in the search result placed last
      foreach ($collection->objects as $object) {
        $sorted[$object->type][] = $object;
      }
    }
  }
  
  //Default to standard sorting
  if (sizeof($sorted) == 0) {
    foreach ($collection->objects as $object) {
      $sorted[$object->type][] = $object;
    }
    // By coincidence, the default type, "Bog", appears alphabetically first.
    ksort($sorted);
  }

  $variables["sorted_collection"] = $sorted;
}

/**
 * Template preprocessor for ting objects.
 */
function template_preprocess_ting_object(&$variables) {
  $object = $variables['object'];

  // Allow modules to add action buttons to objects
  $variables['buttons'] = module_invoke_all('ting_object_buttons', $object);
}

/**
 * Parse a string containing search query arguments into an array
 * @return array Array of search query arguments
 */
function _ting_search_parse_query_args($query_string) {
  $query_args = array();
  
  $query_elements = explode(';', $query_string);
  foreach ($query_elements as &$e) {
    $e = explode(':', $e, 2);
    if (strpos($e[1], ':') !== FALSE) {
      $query_args[$e[0]] = array();
      $e_args = explode(':', $e[1], 2);
      $query_args[$e[0]][$e_args[0]] = $e_args[1];
    } else {
      $query_args[$e[0]] = $e[1];
    }
  }
  
  return $query_args;
}