<?php // $Id$

/**
 * @file ting.module
 * Module to integrate the Ting search engine in our Drupal site.
 */

/**
 * Implementation of hook_menu().
 */
function ting_menu() {
  $path = drupal_get_path('module', 'ting') . '/includes';
  $items = array();

  $items['ting/object/redirect'] = array(
    'title' => 'Redirect to object based on local ID (links from bibliotek.dk).',
    'page callback' => 'ting_search_pages_object_redirect',
    'access arguments' => array('search content'),
    'type' => MENU_CALLBACK,
    'file' => 'ting_search.pages.inc',
  );

  $items['admin/settings/ting'] = array(
    'title' => 'Ting search',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'ting.admin.inc',
    'file path' => $path,
  );

  $items['admin/settings/ting/access'] = array(
    'title' => 'Ting access',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  return $items;
}

/**
 * Menu loader function.
 */
function ting_id_load($id) {
  module_load_include('client.inc', 'ting');
  return ting_get_object_by_id($id);
}

/**
 * Menu loader function.
 */
function ting_local_id_load($id) {
  module_load_include('client.inc', 'ting');
  return ting_get_object_by_local_id($id);
}

/**
 * Add additional information to a ting object.
 */
function ting_enrich_object(&$object) {
  $object = array_shift(ting_add_additional_info(array($object)));
}

/**
 * Implementation of hook_theme().
 */
function ting_theme() {
  return array(
    'ting_thing' => array(
      'arguments' => array('type' => 'object', 'object' => NULL, 'query_args' => NULL),
    ),
    'ting_tabs' => array(
      'arguments' => array('tabs' => NULL, 'wrapper_id' => NULL),
      'template' => 'ting-tabs',
    ),
    'ting_collection' => array(
      'arguments' => array('collection' => NULL, 'query_args' => NULL),
      'template' => 'ting_collection',
    ),
    'ting_object' => array(
      'arguments' => array('object' => NULL),
      'template' => 'ting_object',
    ),
    'ting_object_title' => array(
      'arguments' => array('object' => NULL, 'display_image' => NULL),
      'template' => 'ting-object-title',
    ),
    // Render periodicals as objects. Library system modules should
    // Override this to use another template
    'ting_periodical' => array(
      'arguments' => array('object' => NULL),
      'template' => 'ting_object',
    ),
  );
}

/**
 * Implementation of hook_ctools_plugin_api().
 */
function ting_ctools_plugin_api($module, $api) {
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}

/**
 * Implementation of hook_ctools_plugin_directory().
 *
 * Tells CTools (and thus Panels) where to look for plugin code.
 */
function ting_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' || $module == 'panels') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implementation of hook_imagecache_default_presets()
 */
function ting_imagecache_default_presets() {
  $presets = array();

  $presets['180_x'] = array (
    'presetname' => '180_x',
    'actions' =>
    array (
      0 =>
      array (
        'weight' => '0',
        'module' => 'imagecache',
        'action' => 'imagecache_scale',
        'data' =>
        array (
          'width' => '180',
          'height' => '',
          'upscale' => 0,
        ),
      ),
    ),
  );

  $presets['80_x'] = array (
    'presetname' => '80_x',
    'actions' =>
    array (
      0 =>
      array (
        'weight' => '0',
        'module' => 'imagecache',
        'action' => 'imagecache_scale',
        'data' =>
        array (
          'width' => '80',
          'height' => '',
          'upscale' => 1,
        ),
      ),
    )
  );

  return $presets;
}

/**
 * Implementation of hook_ting_add_js().
 */
function ting_ting_add_js($type) {
  // Add button helper on collection and object views if the required jQuery UI modules are loaded
  // These are not requirements to avoid unecessary dependencies in ting module
  if (in_array($type, array('ting_collection_view', 'ting_object_view'))) {
    if (module_exists('jquery_ui') && module_exists('jquery_ui_theme')) {
      jquery_ui_add('ui.dialog');
      jquery_ui_theme_load();
      drupal_add_js(drupal_get_path('module', 'ting') . '/js/ting.buttons.js');
    }
  }
}

/**
 * Theme something from Ting.
 */
function theme_ting_thing($type, $object, $query_args = NULL) {
  module_invoke_all('ting_add_js', "ting_${type}_view");

  $tabs = array();
  $tabs['main'] = array(
    'title' => t('Materials'),
    'content' => theme("ting_$type", $object, $query_args),
  );
  drupal_alter('ting_tabs', $tabs, $type, $object);

  return theme('ting_tabs', $tabs, $type == 'collection' ? 'ting-collection' : 'ting-object');
}

/**
 * Template preprocessor for ting tabs.
 */
function template_preprocess_ting_tabs(&$vars) {

  // jQuery UI tabs
  jquery_ui_add('ui.tabs');
  jquery_ui_theme_load();

  drupal_add_js(drupal_get_path('module', 'ting') . '/js/ting.js', 'module');

  $tab_labels = array();
  $tab_content = array();
  foreach ($vars['tabs'] as $id => $tab) {
    $id = form_clean_id($id);
    // Cannot use l/url, they can't generate a link with only a fragment. Also
    // we don't want any 'active' classes.
    $tab_labels[] = array(
      'data' => "<a href='#$id'>" . check_plain($tab['title']) . "</a>",
    );
    $tab_content[$id] = $tab['content'];
  }

  $vars['tabs_labels'] = theme('item_list', $tab_labels);
  $vars['tabs_content'] = $tab_content;
}

/**
 * Template preprocessor for collections of ting objects.
 */
function template_preprocess_ting_collection(&$variables) {
  // Preprocess the collection object here!

  $collection = $variables["collection"];

  // Allow modules to add action buttons to collection objects
  $variables['buttons'] = array();
  foreach ($collection->objects as $object) {
    $variables['buttons'][$object->id] = module_invoke_all('ting_object_buttons', $object);
  }

  $sorted = array();

  // If we know what query lead to the collection then we can use this for sorting
  if ($query_args = $variables['query_args']) {
    if ($entry = $query_args['entry']) {
      // Build the query for the collection in the search result
      $query = '';

      //Wrap base query
      $query .= (isset($query_args['query'])) ? '('.$query_args['query'].')' : '';

      //Extend query with selected facets
      if (isset($query_args['facets'])) {
        foreach ($query_args['facets'] as $name => $value) {
          $facetArray[] = $name.'="'.$value.'"';
        }
        $query .= ' AND '.implode(' AND ', $facetArray);
      }

      // Get the corresponding entry in the search result
      $result = ting_do_search($query, $entry, 1, array('facets' => array()));

      //Determine the order of object types based on the order of objects
      //in the search result
      if ($search_collection = array_shift($result->collections)) {
        foreach ($search_collection->objects as $object) {
          $sorted[$object->type] = array();
        }
      }

      //Put all objects from original collection into the ordered object type buckets.
      //Types not referenced in the search result placed last
      foreach ($collection->objects as $object) {
        $sorted[$object->type][] = $object;
      }
    }
  }

  //Default to standard sorting
  if (sizeof($sorted) == 0) {
    foreach ($collection->objects as $object) {
      $sorted[$object->type][] = $object;
    }
    // By coincidence, the default type, "Bog", appears alphabetically first.
    ksort($sorted);
  }

  $variables["sorted_collection"] = $sorted;
}

/**
 * Template preprocessor for ting objects.
 */
function template_preprocess_ting_object(&$variables) {
  $object = $variables['object'];
  // Allow modules to add action buttons to objects
  $variables['buttons'] = module_invoke_all('ting_object_buttons', $object);

  $image_url = ting_covers_object_url($object, '180_x');
  if ($image_url) {
    $variables['image'] = theme('image', $image_url, '', '', NULL, FALSE);
  }

  $variables['title'] = check_plain($object->record['dc:title'][''][0]);

  $titles = $object->record['dc:title'];
  unset($titles['']);
  $titles = array_values($titles);

  $variables['other_titles'] = check_plain(implode(', ', $titles));

  $variables['alternative_titles'] = array();
  if ($object->record['dcterms:alternative']['']) {
    $titles = array_values($object->record['dcterms:alternative']['']);
    $variables['alternative_titles'] = array_map($titles, 'check_plain');
  }

  $creators = array();
  foreach ($object->creators as $i => $creator) {
    $creators[] = l($creator, 'search/ting/' . $creator, array('attributes' => array('class' => 'author')));
  }
  $variables['creators'] = implode(', ', $creators);

  if (!empty($object->date)) {
    $variables['date'] = check_plain($object->date);
  }

  $variables['abstract'] = check_plain($object->record['dcterms:abstract'][''][0]);
}

/**
 * Parse a string containing search query arguments into an array
 * @return array Array of search query arguments
 */
function _ting_search_parse_query_args($query_string) {
  $query_args = array();

  $query_elements = explode(';', $query_string);
  foreach ($query_elements as &$e) {
    $e = explode(':', $e, 2);
    if (strpos($e[1], ':') !== FALSE) {
      $query_args[$e[0]] = array();
      $e_args = explode(':', $e[1], 2);
      $query_args[$e[0]][$e_args[0]] = $e_args[1];
    } else {
      $query_args[$e[0]] = $e[1];
    }
  }

  return $query_args;
}